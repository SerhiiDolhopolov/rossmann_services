### For create network
# docker network create --driver bridge rossmann-network
# docker network inspect rossmann-network

### Check kafka topics
# docker compose exec kafka kafka-console-producer.sh --bootstrap-server localhost:9092 --topic oltp_update_product_quantity

### For save minio volume 
# docker run --rm -v minio-data:/data -v ${PWD}:/backup busybox tar -czf /backup/minio-data.tar.gz -C /data .

### For restore minio volume
# docker volume create minio-data
# docker run --rm -v minio-data:/data -v ${PWD}:/backup busybox tar -xzf /backup/minio-data.tar.gz -C /data

networks:
  rossmann-network:
    external: true

services:
  adminer:
    container_name: adminer
    networks:
      - rossmann-network
    image: adminer
    restart: always
    ports:
      - 1000:8080
    environment:
      - ADMINER_DESIGN=flat

  s3:
    image: minio/minio:latest
    container_name: s3
    networks:
      - rossmann-network
    ports:
      - "1100:9000" 
      - "1101:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=adminpassword
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
  
  

  clickhouse:
    image: bitnami/clickhouse:latest
    container_name: clickhouse
    networks:
      - rossmann-network
    ports:
      - 1200:8123
      - 1201:9000
    environment:
      - CLICKHOUSE_ADMIN_USER=admin
      - CLICKHOUSE_ADMIN_PASSWORD=admin
      - CLICKHOUSE_DB=admin
      - CLICKHOUSE_EXTRA_CONFIG=/bitnami/clickhouse/conf/custom.xml
    volumes:
      - ./clickhouse-config.xml:/bitnami/clickhouse/conf/custom.xml:ro
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  tabix:
    image: spoonest/clickhouse-tabix-web-client:latest
    container_name: tabix
    networks:
      - rossmann-network
    ports:
      - 1203:80
    depends_on:
      - clickhouse
    restart: unless-stopped

  
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - 1400:9092
    networks:
      - rossmann-network
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 10s
      retries: 10

  create_topics:
    image: 'bitnami/kafka:latest'
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - rossmann-network
    command: >
      bash -c "
      TOPICS=('oltp_update_product_quantity' 'local_db_upsert_category' 'local_db_upsert_product' 'local_db_update_product_desc')
      PARTITIONS=(3 1 1 1)

      for i in $${!TOPICS[@]}; do
        TOPIC=$${TOPICS[i]}
        PARTITION_COUNT=$${PARTITIONS[i]}

        if kafka-topics.sh --list --bootstrap-server kafka:9092 | grep -q $${TOPIC}; then
          echo \"Topic $${TOPIC} already exists, skipping creation\";
        else
          kafka-topics.sh --create --topic $${TOPIC} --bootstrap-server kafka:9092 --partitions $${PARTITION_COUNT} --replication-factor 1;
        fi
      done
      "

volumes:
  minio-data:
    name: minio-data
  clickhouse_data:
    name: clickhouse_data